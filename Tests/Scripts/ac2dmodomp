#!/usr/bin/python3
import numpy as np
from pyac2domp import *
from pyepsomp import *
import babin as ba
import time
from modpar import *

#Initialize I/O
LibeInit()
#----------------------------------------------
#Create source 
#----------------------------------------------
#Get the wavelet
fin = ba.bin(fsrc)
data=fin.read((nt))
sxx = PyepsStore1di(sx)       #Convert numpy integer array to c-type
syy = PyepsStore1di(sy)       #Convert numpy integer array to c-type
wavelet = PyepsStore1df(data) #Convert numpy float array to c-type   
#Create source object
src=SrcNew(wavelet,sxx,syy)
#----------------------------------------------
#Create receivers 
#----------------------------------------------
rxx = PyepsStore1di(rx)  #Convert numpy integer array to c-type
ryy = PyepsStore1di(ry)  #Convert numpy integer array to c-type
snp= PyepsStore1ds(fsnp) #Convert python string to c-type
#Create receiver object
rec= RecNew(rxx,ryy,nt,resamp,sresamp,snp);
#----------------------------------------
# Create model
#----------------------------------------
#Get the velocity model
fin = ba.bin(fvp)
data=fin.read((ny,nx))
#Convert 2d numpy float array to c-type
vp=PyepsStore2df(data);

#Get the density model
fin = ba.bin(frho)
data=fin.read((ny,nx))
#Convert 2d numpy float array to c-type
rho=PyepsStore2df(data);

#Get the Q model
fin = ba.bin("q.bin")
data=fin.read((ny,nx))
#Convert 2d numpy float array to c-type
q=PyepsStore2df(data);

#Create a new model
model=ModelNew (vp,rho,q,dx,dt,w0,nb,rheol)
      
#--------------------------------------
#Create fd solver
#--------------------------------------
#Create solver object
ac2d = Ac2dNew(model)

#--------------------------------------
#Run solver
#--------------------------------------
t1=time.perf_counter()
Ac2dSolve(ac2d,model,src,rec,nt,l)
print("Solver wall clock time: ", time.perf_counter()-t1)

#--------------------------------------
#Save Recording
#--------------------------------------
fp  = "p.bin"   # Output file name for pressure recording
p=PyepsStore1ds(fp)
RecSave(rec,p)
